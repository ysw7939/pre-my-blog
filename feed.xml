<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ysw7939.github.io/</id><title>하루코딩</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-05-05T17:45:55+09:00</updated> <author> <name>su-won</name> <uri>https://ysw7939.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ysw7939.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://ysw7939.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 su-won </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>객체 지향 설계와 스프링</title><link href="https://ysw7939.github.io/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81/" rel="alternate" type="text/html" title="객체 지향 설계와 스프링" /><published>2023-05-05T00:00:00+09:00</published> <updated>2023-05-05T00:00:00+09:00</updated> <id>https://ysw7939.github.io/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81/</id> <content src="https://ysw7939.github.io/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81/" /> <author> <name>Yang</name> </author> <category term="Spring" /> <summary> 객체 지향 설계와 스프링 스프링이란 여러가지의 기술의 모음이라고 할수 있다. 스프링 데이터 : JPA, DB에 있는 기본적인 CRUD를 편리하게 사용할수 있도록 도와준다. 스프링 시큐리티 : 보안과 관련된 설정을 도와준다. 스프링 세션 : 세션에 관련된 설정을 도와준다. 스프링 배치 : 배치 처리를 도와준다. 스프링 Rest Docs : API 문서화를 편하게 해준다. …. 스프링 부트 Tomcat과 같은 별도의 웹서버를 내장에서 별도의 웹 서버를 설치하지 않아도 된다. starter 라이브러리를 가져올때 starter를 사용하면 하나를 가져올때 필요한 부수적인 라이브러리를 같이 빌드한다. 서드파티(3rd parth) 자주사용되는 메이저 라이브러리와의 버전호환성을 관리해준다. ... </summary> </entry> <entry><title>HTTP 기본</title><link href="https://ysw7939.github.io/posts/HTTP-%EA%B8%B0%EB%B3%B8/" rel="alternate" type="text/html" title="HTTP 기본" /><published>2023-04-26T00:00:00+09:00</published> <updated>2023-04-26T00:00:00+09:00</updated> <id>https://ysw7939.github.io/posts/HTTP-%EA%B8%B0%EB%B3%B8/</id> <content src="https://ysw7939.github.io/posts/HTTP-%EA%B8%B0%EB%B3%B8/" /> <author> <name>Yang</name> </author> <category term="HTTP" /> <summary> HTTP 기본 HTTP Hyper Text Transfer Protoco 모든 형태의 데이터를 HTTP 메시지로 전송한다. HTML, TEXT IMAGE, 음성, 영상, 파일 JSON, XML (API) 기반 프로토콜 TCP: HTTP/1.1, HTTP/2 UDP: HTTP/3 현재 HTTP/1.1 주로 사용한다. HTTP 특징 클라이언트 서버 구조 Request Response 구조 클라이언트는 UI와 사용성에 대해 고민한다. 서버는 비지니스 로직과 데이터를 관리한다. Stateful 상태 유지: 중간에 다른 서버로 변경되서는 안된다. 서버가 이전상태의 내용을 보존한다. Stateless 무상태: 중간에 다흔 서버로 변경되어도 된다.... </summary> </entry> <entry><title>URI와 웹 브라우저 요청 흐름</title><link href="https://ysw7939.github.io/posts/URI%EC%99%80-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84/" rel="alternate" type="text/html" title="URI와 웹 브라우저 요청 흐름" /><published>2023-04-24T00:00:00+09:00</published> <updated>2023-04-27T01:35:10+09:00</updated> <id>https://ysw7939.github.io/posts/URI%EC%99%80-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84/</id> <content src="https://ysw7939.github.io/posts/URI%EC%99%80-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84/" /> <author> <name>Yang</name> </author> <category term="HTTP" /> <summary> URI와 웹 브라우저 요청 흐름 URI(Uniform Resource Identifier) uri 안에는 url 과 urn이 포함되어있다. Uniform : 리소스 식별하는 통일된 방식 Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음) Identifier : 다른 항목과 구분하는데 필요한 정보 URL(Resource Locator) 리소스의 위치를 의미한다. URN(Resource Name) 리소스의 이름을 의미한다. 이름만으로 실제 리소스를 찾을 수 있는 방법이 보편화 되어있지 않다. URL 문법 scheme 주로 프로토콜을 사용한다. 프로토콜 : 클라이언트와 서버간의 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙을 의미한다. 예) htt... </summary> </entry> <entry><title>[HTTP]인터넷 프로토콜</title><link href="https://ysw7939.github.io/posts/%EC%9D%B8%ED%84%B0%EB%84%B7-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/" rel="alternate" type="text/html" title="[HTTP]인터넷 프로토콜" /><published>2023-04-23T00:00:00+09:00</published> <updated>2023-04-23T00:00:00+09:00</updated> <id>https://ysw7939.github.io/posts/%EC%9D%B8%ED%84%B0%EB%84%B7-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/</id> <content src="https://ysw7939.github.io/posts/%EC%9D%B8%ED%84%B0%EB%84%B7-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/" /> <author> <name>Yang</name> </author> <category term="HTTP" /> <summary> 인터넷 네트워크 인터넷 프로토콜 인터넷 세상은 서로 통신을 하기위해 ip주소를 받게된다. 인터넷 프로토콜은 지정된 ip주소로 패킷이라는 통신 단위를 통해 데이터를 전달 할수있는 역할을 한다. 전송된 패킷은 여러개의 노드를 거쳐서 목적지 까지 이동하게 된다. IP 프로토콜의 한계 비연결성 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷이 전송된다. 비신뢰성 중간에 패킷이 사라지는 문제나 패킷이 순서대로 오지 않는 문제를 해결할 수 없다. 프로그램 구분 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이면 구분할수 있는 방법이 없다. TCP 전송 제... </summary> </entry> <entry><title>[JPA]영속성 관리</title><link href="https://ysw7939.github.io/posts/%EC%98%81%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC/" rel="alternate" type="text/html" title="[JPA]영속성 관리" /><published>2023-03-29T00:00:00+09:00</published> <updated>2023-03-30T21:43:34+09:00</updated> <id>https://ysw7939.github.io/posts/%EC%98%81%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC/</id> <content src="https://ysw7939.github.io/posts/%EC%98%81%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC/" /> <author> <name>Yang</name> </author> <category term="JAP" /> <summary> 영속성 관리 엔티티 팩토리 EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpabook"); META-INF/persistence.xml 에 있는 정보를 바탕으로 엔티티 펙토리를 생성한다. 엔티티 매니저 팩토리는 이름 그대로 엔티티 메니저를 만드는 공장이다. 엔티티 매니저 팩토리는 여러 스레드가 동시에 접근해도 안전하므로 서로다른 스레드 간에 공유해도 되지만, 엔티티 매니저는 여러 스레드가 동시에 접근하면 동시성 문제가 생기므로 스레드간에 공유해서는 안된다. 영속성 컨텍스트란 ‘엔티티를 영구 저장하는 환경’이라는 뜻이다. 엔티티 메니저로 엔티티를 조회하거나 저장하게되면 엔티티메니저는 영속성 컨텍스트에 엔티티를 보관하... </summary> </entry> </feed>
